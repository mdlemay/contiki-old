BSP_PATH=$(CONTIKI)/platform/galileo/bsp
LIBC_PATH=$(BSP_PATH)/libc
LIBC=$(LIBC_PATH)/i586-elf
LIBGCC_PATH = /usr/lib/gcc/$(shell gcc -dumpmachine)/$(shell gcc -dumpversion)

CONTIKI_TARGET_DIRS = . core/sys/
CONTIKI_TARGET_MAIN = ${addprefix $(OBJECTDIR)/,contiki-main.o}
CONTIKI_SOURCEFILES += contiki-main.c clock.c rtimer-arch.c

PROJECT_SOURCEFILES += newlib-syscalls.c

CONTIKI_CPU=$(CONTIKI)/cpu/x86
include $(CONTIKI)/cpu/x86/Makefile.x86_quarkX1000

# Omit exception handling unwind tables (see
# http://wiki.dwarfstd.org/index.php?title=Exception_Handling).  Removing these
# tables saves space and has not caused any readily-apparent functional
# changes.
#
# Furthermore, the .eh_frame and .eh_frame_hdr sections that are otherwise
# generated are treated as code sections by the UEFI GenFw program, since they
# are read-only alloc sections.  They get grouped with the actual code
# sections, ahead of the data sections.  This perturbs symbols and complicates
# debugging.
#
# Synchronize the unwind table options here with the CFLAGS and CXXFLAGS in
# ./bsp/libc/build_newlib.sh.
CFLAGS += -fno-stack-protector -fno-asynchronous-unwind-tables -fno-unwind-tables -nostdinc -I$(LIBC)/include -isystem $(LIBGCC_PATH)/include -isystem $(LIBGCC_PATH)/include-fixed
LDFLAGS += -nostdlib -L$(LIBC)/lib -L$(LIBGCC_PATH)/32

TARGET_LIBFILES += -lm -lc -lgcc

-include $(LIBC_PATH)/Makefile.libc

ifndef BUILT_LIBC
  $(error Build the C library by executing $(LIBC_PATH)/build_newlib.sh)
endif
