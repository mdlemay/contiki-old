LIBC = $(CONTIKI)/platform/galileo/bsp/libc

CONTIKI_TARGET_DIRS = . core/sys/
CONTIKI_TARGET_MAIN = ${addprefix $(OBJECTDIR)/,contiki-main.o}

CONTIKI_SOURCEFILES += contiki-main.c rtimer-arch.c clock.c newlib-syscalls.c

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/x86
include $(CONTIKI)/cpu/x86/Makefile.x86_quarkX1000

LIBGCC_PATH = /usr/lib/gcc/$(shell gcc -dumpmachine)/$(shell gcc -dumpversion)

CFLAGS += -m32 -march=i586 -nostdinc -isystem $(LIBC)/i586-elf/include -isystem $(LIBGCC_PATH)/include -isystem $(LIBGCC_PATH)/include-fixed
LDFLAGS += -m32 -nostdlib -T $(LINKERSCRIPT)
ASFLAGS += --32 -march=i586 -mtune=i586

### Ideally, this should be part of LDFLAGS (-lc -lm etc). However, we found out that archive
### static files (.a) must be linked after our own object files, otherwise the linker gets lost
### and we get undefined references only.
TARGET_LIBFILES = $(OBJECTDIR)/newlib-syscalls.o $(LIBC)/i586-elf/lib/libm.a $(LIBC)/i586-elf/lib/libc.a $(LIBGCC_PATH)/32/libgcc.a

### Compilation rules
CUSTOM_RULE_LINK = 1
ELF = $@.elf
BIN = $@.bin

%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} \
	    ${filter %.a,$^} $(TARGET_LIBFILES) -o $(ELF)

  # Create raw binary.
	@$(OBJCOPY) -O binary $(ELF) $(BIN)

  # Create stripped elf
	@cp $(ELF) $(ELF).full
	@$(STRIP) $(ELF)

  # Print elf sections size.
	@$(SIZE) $(ELF)

  # Print files size.
	@wc -c $(ELF)
	@wc -c $(BIN)
